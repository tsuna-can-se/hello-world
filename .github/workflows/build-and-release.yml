name: パッケージのビルドとリリース

on:
  push:
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-Beta[0-9]+'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  ci:
    name: パッケージのビルドとテスト
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug

    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: .NET SDK のセットアップ
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
          include-prerelease: false

      - name: NuGet パッケージの復元
        run: dotnet restore

      - name: アプリケーションのビルド
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      - name: 単体テストの実行
        run: |
          dotnet add tests/Test.TsunaCan.HelloWorld/Test.TsunaCan.HelloWorld.csproj package coverlet.msbuild
          dotnet test --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov > testResult.txt
          echo '# Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/Done/,/Elapsed/p' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/A total of/,/Passed/p' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/+----------------------------------+--------+--------+--------+/,/+---------+--------+--------+--------+/p' | sed -e '$d' | sed -e '$d' | sed -e '$d' | sed -e '/+----------------------------------+--------+--------+--------+/d' | sed -e 's/|//' | sed -e 's/|*$//g' | sed -e '1d' | sed -e '1i --------------------------|--------|--------|------------------' | sed -e '1i Module | Line | Branch | Method' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/+---------+--------+--------+--------+/,/Average/p' | sed -e '1,2d' | sed -e '/+---------+--------+--------+--------+/d' | sed -e 's/|//' | sed -e 's/|*$//g' | sed -e '1i ----------|--------|--------|---------' | sed -e '1i --- | Line | Branch | Method' | sed -e '$d' | sed -e '$d' | sed -e '$d' | sed -e '$d' | sed -e '$d' | sed -e '$d' | sed -e '$d' >> $GITHUB_STEP_SUMMARY

  packaging:
    name: パッケージング
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: test
        run: |
          pre_release=false
          if [[ "${{ github.ref_name }}" == *"Beta"* ]]; then
            pre_release=true
          fi
          echo "is_pre_release:$pre_release"
          echo "is_pre_release=$pre_release" >> $GITHUB_ENV
          echo "package_version=${{ github.ref_name }}" >> $GITHUB_ENV
          
          echo 'github.event_name:${{ github.event_name }}'
          echo 'github.ref:${{ github.ref }}'
          echo 'github.ref_name:${{ github.ref_name }}'

      - name: test2
        run: |
          echo "is_pre_release:${{ env.is_pre_release }}"
          echo "package_version:${{ env.package_version }}"
