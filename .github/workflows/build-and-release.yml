name: パッケージのビルドとリリース

on:
  push:
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-Beta[0-9]+'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PACKAGING_PROJECT_NAME: TsunaCan.HelloWorld
  TEST_PROJECT_NAME: Test.TsunaCan.HelloWorld
  PACKAGE_ARTIFACT_NAME: packages

jobs:
  ci:
    name: パッケージのビルドとテスト

    strategy:
      fail-fast: false
      matrix:
        vm_image: [ubuntu-latest, windows-latest]
        framework_version: [net48, net6.0, net7.0]
        exclude:
          - vm_image: ubuntu-latest
            framework_version: net48

    runs-on: ${{ matrix.vm_image }}

    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug

    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: application-build
        name: アプリケーションのビルド
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt

      - name: ビルド結果の表示
        shell: bash
        if: ${{ success() || (failure() && steps.application-build.conclusion == 'failure') }}
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt | sed -n -e 's/^/> /p' >> $GITHUB_STEP_SUMMARY

      - name: 単体テストの実行
        id: execute-unit-test
        continue-on-error: true
        run: dotnet test --no-build --logger trx --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework_version }} --collect "XPlat Code Coverage"

      - id: create-test-result-report
        name: テスト結果ページの作成
        uses: dorny/test-reporter@v1
        if: ${{ success() || (failure() && steps.execute-unit-test.conclusion == 'failure') }}
        with:
          name: '${{ matrix.framework_version }} on ${{ matrix.vm_image }} test results'
          path: '**/TestResults/*.trx'
          path-replace-backslashes: 'true'
          reporter: 'dotnet-trx'
          only-summary: 'false'
          list-suites: 'all' # all / failed
          list-tests: 'all' # all / failed / none
          max-annotations: '10'
          fail-on-error: 'true'

      - name: テスト結果のサマリー表示
        shell: bash
        if: ${{ success() || (failure() && steps.execute-unit-test.conclusion == 'failure') }}
        run: |
          echo '## Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          echo 'Test was a ${{ steps.create-test-result-report.outputs.conclusion }}.' >> $GITHUB_STEP_SUMMARY
          echo 'Completed in ${{ steps.create-test-result-report.outputs.time }}ms with ${{ steps.create-test-result-report.outputs.passed }} passed, ${{ steps.create-test-result-report.outputs.failed }} failed and ${{ steps.create-test-result-report.outputs.skipped }} skipped.' >> $GITHUB_STEP_SUMMARY

      - id: create-coverage-report
        name: コードカバレッジレポートの解析
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        if: ${{ success() || (failure() && steps.execute-unit-test.conclusion == 'failure') }}
        with:
          reports: '**/TestResults/*/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'MarkdownSummaryGithub' #MarkdownSummary / MarkdownSummaryGithub / MarkdownDeltaSummary

      - name: コードカバレッジの結果表示
        shell: bash
        run: |
          echo '## Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          sed -i s/'# Summary'/'${{ matrix.framework_version }} on ${{ matrix.vm_image }}'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^#/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

      - name: コードカバレッジの結果をPull-requestに表示
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: CoverageReport/SummaryGithub.md

  packaging:
    name: パッケージング
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      BUILD_CONFIGURATION: Release
    outputs:
      is_pre_release: ${{ steps.setup-variables.outputs.is_pre_release }}
      package_version: ${{ steps.setup-variables.outputs.package_version }}
      file_version: ${{ steps.setup-variables.outputs.file_version }}

    steps:
      - id: setup-variables
        name: 変数の初期化
        run: |
          pre_release=false
          if [[ "${{ github.ref_name }}" == *"Beta"* ]]; then
            pre_release=true
          fi
          echo "is_pre_release:$pre_release"
          echo "is_pre_release=$pre_release" >> $GITHUB_ENV
          echo "is_pre_release=$pre_release" >> $GITHUB_OUTPUT

          package_version="${{ github.ref_name }}"
          echo "package_version:$package_version"
          echo "package_version=$package_version" >> $GITHUB_ENV
          echo "package_version=$package_version" >> $GITHUB_OUTPUT

          file_version=${package_version:1}
          echo "file_version:$file_version"
          echo "file_version=$file_version" >> $GITHUB_ENV
          echo "file_version=$file_version" >> $GITHUB_OUTPUT

      - name: ブランチのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: .NET SDK のセットアップ
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          dotnet-quality: 'ga'
          
      - name: NuGet パッケージの作成
        run: |
          mkdir $PACKAGE_ARTIFACT_NAME
          dotnet pack ./src/$PACKAGING_PROJECT_NAME/$PACKAGING_PROJECT_NAME.csproj --configuration $BUILD_CONFIGURATION --output $PACKAGE_ARTIFACT_NAME -p:PackageVersion=$file_version -p:Version=$file_version -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg

      - name: ビルドアーティファクトのアップロード
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_ARTIFACT_NAME }}
          path: ${{ env.PACKAGE_ARTIFACT_NAME }}/
          retention-days: 7

  release-to-github:
    name: GitHub へのリリース
    runs-on: ubuntu-latest
    needs: packaging
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: ビルドアーティファクトのダウンロード
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_ARTIFACT_NAME }}

      - id: create-github-release
        name: GitHub のリリース作成
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.nupkg
            *.snupkg
          generate_release_notes: true
          name: "${{ needs.packaging.outputs.package_version }}"
          prerelease: ${{ needs.packaging.outputs.is_pre_release }}
          tag_name: "${{ needs.packaging.outputs.package_version }}"

      - name: GitHub のリリース結果表示
        run: |
          echo "Is pre-release:${{ needs.packaging.outputs.is_pre_release }}"
          echo "Package version:${{ needs.packaging.outputs.package_version }}"
          echo "Release page URL:${{ steps.create-github-release.outputs.url }}"
          echo "# GitHub release info :octocat:" >> $GITHUB_STEP_SUMMARY
          echo "Release page URL: <${{ steps.create-github-release.outputs.url }}>" >> $GITHUB_STEP_SUMMARY

  release-to-nuget:
    name: NuGet へのリリース
    runs-on: ubuntu-latest
    needs: packaging
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: ビルドアーティファクトのダウンロード
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_ARTIFACT_NAME }}

      - name: .NET SDK のセットアップ
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          dotnet-quality: 'ga'

      - name: NuGet パッケージの公開
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
          LOG_FILE_NAME: nuget_push_log.txt
        run: |
          dotnet nuget push $PACKAGING_PROJECT_NAME.${{ needs.packaging.outputs.file_version }}.nupkg --api-key $NUGET_API_KEY --source $NUGET_SOURCE > $LOG_FILE_NAME
          cat $LOG_FILE_NAME
          echo "# NuGet release info :toolbox:" >> $GITHUB_STEP_SUMMARY
          cat $LOG_FILE_NAME >> $GITHUB_STEP_SUMMARY
