name: パッケージのビルドとリリース

on:
  push:
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-Beta[0-9]+'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  ci:
    name: パッケージのビルドとテスト
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug

    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: .NET SDK のセットアップ
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          dotnet-quality: 'ga'

      - name: NuGet パッケージの復元
        run: dotnet restore

      - name: アプリケーションのビルド
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      - name: 単体テストの実行
        run: |
          dotnet add tests/Test.TsunaCan.HelloWorld/Test.TsunaCan.HelloWorld.csproj package coverlet.msbuild
          dotnet test --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov > testResult.txt
          echo '# Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/Done/,/Elapsed/p' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/A total of/,/Passed/p' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/| Module[ ]*| Line[ ]*| Branch[ ]*| Method[ ]*|/,/^$/p' | sed -e '$d'| sed -e '/+[-]*+[-]*+[-]*+[-]*+/d' | sed -e '2i| --- | --- | --- | --- |' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          cat testResult.txt | sed -n -e '/|[ ]*| Line[ ]*| Branch[ ]*| Method[ ]*|/,/^$/p' | sed -e '$d'| sed -e '/+[-]*+[-]*+[-]*+[-]*+/d' | sed -e '2i| --- | --- | --- | --- |' >> $GITHUB_STEP_SUMMARY

  packaging:
    name: パッケージング
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      ARTIFACT_DIR: packages
      BUILD_CONFIGURATION: Release
    outputs:
      is_pre_release: ${{ steps.setup-variables.outputs.is_pre_release }}
      package_version: ${{ steps.setup-variables.outputs.package_version }}
      file_version: ${{ steps.setup-variables.outputs.file_version }}

    steps:
      - id: setup-variables
        name: 変数の初期化
        run: |
          pre_release=false
          if [[ "${{ github.ref_name }}" == *"Beta"* ]]; then
            pre_release=true
          fi
          echo "is_pre_release:$pre_release"
          echo "is_pre_release=$pre_release" >> $GITHUB_ENV
          echo "is_pre_release=$pre_release" >> $GITHUB_OUTPUT

          package_version="${{ github.ref_name }}"
          echo "package_version:$package_version"
          echo "package_version=$package_version" >> $GITHUB_ENV
          echo "package_version=$package_version" >> $GITHUB_OUTPUT

          file_version=${package_version:1}
          echo "file_version:$file_version"
          echo "file_version=$file_version" >> $GITHUB_ENV
          echo "file_version=$file_version" >> $GITHUB_OUTPUT

      - name: ブランチのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: .NET SDK のセットアップ
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          dotnet-quality: 'ga'
          
      - name: NuGet パッケージの作成
        run: |
          mkdir ${{ env.ARTIFACT_DIR }}
          dotnet pack ./src/TsunaCan.HelloWorld/TsunaCan.HelloWorld.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ env.ARTIFACT_DIR }} -p:PackageVersion=${{ env.file_version }} -p:Version=${{ env.file_version }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg

      - name: ビルドアーティファクトのアップロード
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: ${{ env.ARTIFACT_DIR }}/
          retention-days: 7

  release-to-github:
    name: GitHubへのリリース
    runs-on: ubuntu-latest
    needs: packaging
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: ビルドアーティファクトのダウンロード
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: test
        run: |
          dir

      - id: create-github-release
        name: Github のリリース作成
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          name: "${{ needs.packaging.outputs.package_version }}"
          prerelease: ${{ needs.packaging.outputs.is_pre_release }}
          tag_name: "${{ needs.packaging.outputs.package_version }}"

      - name: GitHub のリリース結果表示
        run: |
          echo "Is pre-release:${{ needs.packaging.outputs.is_pre_release }}"
          echo "Package version:${{ needs.packaging.outputs.package_version }}"
          echo "Release page URL:${{ steps.create-github-release.outputs.url }}"
          echo "# GitHub release info" >> $GITHUB_STEP_SUMMARY
          echo "Release page URL: <${{ steps.create-github-release.outputs.url }}>" >> $GITHUB_STEP_SUMMARY
