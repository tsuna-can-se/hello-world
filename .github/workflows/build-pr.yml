name: ビルドと単体テスト

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: write

jobs:
  ci:
    name: パッケージのビルドとテスト
  
    strategy:
      fail-fast: false
      matrix:
        vm_image: [ubuntu-latest, windows-latest]
        framework_version: [net48, net6.0, net7.0]
        exclude:
          - vm_image: ubuntu-latest
            framework_version: net48
  
    runs-on: ${{ matrix.vm_image }}
   
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug
  
    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
  
      - id: application-build
        name: アプリケーションのビルド
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt
  
      - name: ビルド結果の表示
        shell: bash
        if: ${{ success() || (failure() && steps.application-build.conclusion == 'failure') }}
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt | sed -n -e 's/^/> /p' >> $GITHUB_STEP_SUMMARY
  
      - name: 単体テストの実行
        id: execute-unit-test
        continue-on-error: true
        run: dotnet test --no-build --logger "trx;LogFileName=${{ matrix.vm_image }}-${{ matrix.framework_version }}.trx" --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework_version }} --collect "XPlat Code Coverage" > unit-test-result.txt

      - name: テスト結果のサマリー表示
        shell: bash
        run: |
          echo '## Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat unit-test-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
    
      - id: create-coverage-report
        name: コードカバレッジレポートの解析
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: '**/TestResults/*/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'MarkdownSummaryGithub'
    
      - name: コードカバレッジの結果表示
        shell: bash
        run: |
          echo '## Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          sed -i s/'# Summary'/'Coverage report.'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^#/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
    
      - name: コードカバレッジの結果をPull-requestに表示
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          recreate: true
          path: CoverageReport/SummaryGithub.md

      - name: テスト結果のアップロード
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.vm_image }}-${{ matrix.framework_version }}
          path: tests/Test.TsunaCan.HelloWorld/TestResults/${{ matrix.vm_image }}-${{ matrix.framework_version }}.trx
          retention-days: 1
